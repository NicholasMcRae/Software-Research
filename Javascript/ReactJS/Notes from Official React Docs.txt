Hello World
***********
- shows example

Introducing JSX
***************
- not HTML
- syntax extension to JavaScript
- comes with full power of JavaScript
-  produces React 'Elements'
- Why JSX?
	- rendering logic is inherently coupled with other UI logic
	- events
	- state over time
	- how data is prepared for display
	- instead of separating tech, by putting markup and logic in separate files React separates concerns with loosely coupled units called components that contain both
	- JSX isn't required, but people find it helpful as a visual aid
- *example of using a variale inside JSX*
- can put any valid JavaScript expression inside the curly braces in JSX
- they split JSX over multiple lines, not required but it avoids automatic semicolon insertion
- JSX expressions become regular JavaScript function calls and evaluate to objects
- can use it in if statements, for loops, assign to variables, accept it as arguments and return it from functions
- JSX prevents injection attacks

Rendering Elements
******************
- smallest building blocks of React apps
- describes what you want to see on the screen
- elements are what components are made of
- Rendering an element into the DOM
	- div with root id
	- everything inside it will be managed by React DOM
	- applications built with just React usually have a single root DOM node
	- you may have as many isolated root DOM nodes as you look
	- pass the element and root div to ReactDOM.render
- React elements are immutable
- React only updates what's necessary
	- React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state
- in our experience, thinking about how the UI should look at any given moment rather than how to change it over time eliminates a whole class of bugs

Components and Props
********************
- Components let you split the UI into independent, reusable pieces, and think about each piece in isolation
- Conceptually, components are like Javascript functions
	- They accept arbitrary inputs, called props, and return React elements describing what should appear on the screen
- Function and class components
	- a function is a valid react compoent because it accepts a single props object argument with data and returns a react element
	- we call such components function components because they are literally javascript functions
- You can also use an ES6 class to define a component
- Previously we only encountered React elements that represent DOM tags
- However, elements can also represent user defined components
- When React sees an element representing a user-defined component, it passes JSX attributes to this component as a single object, we call this 'props
- Note: Always start component names with a capital letter
- Composing Components
	- Components can refer to other components in their output
	- This lets us use the same component abstraction for any level of detail
- Don't be afraid to split components into smaller components
- We recommend naming props from the component's own point of view rather than the context in which it is being used
- Extracting components might seem like grunt work at first, but having a palette of reusable components pays off in larger apps
- A good rule of thumb is that if a part of your UI is used several times, or is complex enough on its own it is a good candidate to be a reusable component
- Props are Read Only
	- a component must never modify its own props
	- must resumble a 'pure' function
	- React is pretty flexible but it has a single strict rule: All React components must act like pure functions with respect to their props
- Of course, application UIs are dynamic and change over time
- In the next section we will introduce the concept of state

State and Lifecycle
*******************
- Introduces concept of state and lifecycle in a React component
- In this section, we will learn how to make the clock component truly reusable and encapsulated. It will set up its own timer and update itself every second
- that the clock sets up a timer and updates the UI every second could be an implementation detail of the clock
- ideally we want to write this once and have the clock update itself
- need to add state to the clock component
- state is similar to props, but it is private and fully controlled by the component
- *example building out a class*
- clock is now defined as a class rather than a function
- the render method will be called each time an update happens, but as long as we render clock into the same DOM node, only a single instance of the clock class will be used
- this lets us use additional features such as local state and lifecycle methods
- adding local state to a class
	- replace this.props.date with this.state.date in the render method
	- add a class cnstructor that assigns the initial this.state
	- note how we pass props to the base constructor
	- class components should always call the base constructor with props
	- remove the date prop from the clock element
	- next we'll make the clock set up its own timer and update itself every second
- adding lifecycle methods to a class
	- in applications with many components, it's very important to free up resources taken by the components when they are destroyed
	- we want to set up a timer whenever the clock is rendered for the first time, called mounting
	- also want to clear that timer when the dom produced by the clock is removed, this is called unmounting
	- set up function in componentDidMount
	- Note how we save the timer ID right on this
	- while props is set up by react itself and this.state has a special meaning, you are free to add additional fields to the class manually if you need to sotre something that doesn't participate in the data flow (like a timer ID)
	- we will tear down the timer in the componentwillunmount lifecycle method
	- finally we will implement a method called tick()
- There are three things you should know aboue setState
	- do not modify state directly, instead use set state
	- the oly plae where you can assign this.state is the constructor
	- state updates may be asynchronous
	- React may batch multiple setState calls into a single update for performance
	- *review this*
	- State updates are merged
	- When you call setState React merges the object you provide into the current state
	- The data flows down
	- neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn't care whether it is defined as a function or a class
	- This is why state is often called local or encapsulated
	- a component may choose to pass its state down as props to its child components
	
Handling Events
***************
- handling events with React elements is similar to handling events on dom elements, with a few syntactic differences
	- React events are named using camelcase, rather than lower case
	- With JSX you pass a function as the event handler, rather than a string
	- you cannot return false to prevent default behavior in React
	- you must call preventdefault explicitly
- When you define a component using an ES6 class, a common pattern is for an event handler to be a method on the class
- You have to be careful about the meaning of this in JSX callbacks. In javascript, class methods are not bound by default
0 if you forget to bind this.handleClick and pass it to onClick, this will be undefined when the function is actually called
- This is not React specific behavior, it is how functions work in Javascript

Conditional Rendering
*********************
- In React you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application
- Element Variables
	- You can use variables to store elements, which can help you conditionally render a part of the component while the rest of the output doesn't change
- inline If
	- you may embed any expressions in JSX by wrapping them in curly braces
- Preventing component from rendering

Lists and Keys
**************
- Rendering multiple components
	- You can build collections of elements and include them in JSX using curly braces
- Basic List Component
	- usually you would render lists inside a component
	- we can refactor the previous example into a component that accepts an array of numbers and outputs a list of elements
	- when you run this code you'll be given a warning that a key should be provided for list items
	- keys help react identify which items have changed, added, or removed
	- most often you would use IDs from your data as keys
	- you can use the item index as a last resort
- Extracting Components with Keys
	- keys only make sense in the context of the surrounding array
- Keys must only be unique among siblings
	- Keys used within arrays should be unique among their siblings, however they don't need to be globally unique
	- keys serve as a hint to React but they don't get passed to your components
	- If you need the same value in your component, pass it explicitly as a prop with a different name
- If the map() body is too nested, it might be a good time to extract a component

Forms
*****
- form elements work a little bit differently from other DOM elements, because they naturally keep some internal state
- It's convenient to have a JavaScript function that handles the submission of the form and has access to the data thtat the user entered into the form
- standard way to achieve this is with a technique called 'controlled components'
- Controlled Components
	- in HTML input, textarea, select maintain their own state and update it based on user input
	- in React, mutable state is typically kept in the state property of components, updated with setState
	- the two can be combined by making the React state the 'Single source of truth'
	- then the react component that renders a form also controls what happens in that form on subsequent user input
- Handling multiple inputs
	- when you need to handle multiple controlled input elements, you can add a name attribute to each element 
- Alternatives to controlled components
	- can be tedious, so can use uncontrolled components, an alternative technique
	
Lifting State Up
****************
- often several components need to reflect the same changing data
- recommend lifting the shared state up to their closest common ancestor
- Lessons Learned
	- There should be a single source of truth for any data that changes in a React application
	- you should rely on the top down data flow
	- since any state lives in some component and that component alone can change it, the surface area for bugs is greatly reduced
	- if something can be derived from either props or state, it probably shouldn't be in the state
	
Composition vs Inheritance
**************************
- React has a poewrful composition model, and we recommend using composition instead of inheritance to reuse code between components
	- some components don't know their children ahead of time
	- we recommend that such components use the special children prop to pass children elements directly into their output
- So what about inheritance?
	- haven't found any use cases where we would recommend creating component inheritance hierarchies
	- props and composition giv eyou all the flexibility you need to customize a component's look and behavior
	
Thinking in React
*****************
- React is, in our opinion, the premier way to build big, fast web apps with JavaScript
- It has scaled very well for Facebook
- Start With a Mock
- 1) Break the UI into a componenet hierarchy
- 2) Build a Statis Version in React
- 3) Identify the minimal (but complete) representation of UI state
- 4) Identify where your state should live
- 5) Add Inverse data flow