Apply Functional Programming Principles
- Minimizing mutability
- Better responsibility allocation
- More numerous, smaller functions
- Simpler to debug

Ask 'What would the user do'

Automate your coding standard

Beauty is in simplicity
- Beautiful code is simple code
- Each individual part is kept simple with simple responsibilities and simple relationships

Before you refactor 
- Take stock of existing code and tests
- Reuse code
- Many incremental changes are better than one massive change
- Ensure that tests keep passing
- No ego
- New technology is a bad reason
- New code can be worse

Beware the share
- Re-use isn't always better
- Sometimes we want two parts to be able to evolve separately

The Boy Scout Rule
- Leave the campground cleaner than when you found it

Check your code before blaming others
- Question your own assumptions and the assumptions of others

Choose Your Tools with Care
- Different tools may rely on different assumptions about their context
- Different tools have different lifecycles
- Vendor lock-in occurs
- Free isn't always free

Code in the language of the domain

Code is design
- The pressure to use incomplete designs is strong

Code Layout Matters
- Easy to Scan
- Expressive Layout
- Compact Format

Code Reviews
- Purpose of code reviews should be to share knowledge and establish common guidelines
- Collective code ownership
- Ensure comments are constructive, not caustic

Coding with Reason
- Tightness in code - bunch of suggestions

A comment on comment
- Common only what the code cannot say

Continuous Learning
- Keep learning to stay relevant

Convenience is not an -ility
- Favour convenience for user over laziness

Deploy Early and Often
- Continuous deployment

Business Exceptions from Technical
- Techinical problems and business logic that prevents us from misusing the application
- They should be distinguished from each other

Do Lots of Deliberate Practice
- Deliberate practice to improve your ability to perform a task
- Do what you're not good at




