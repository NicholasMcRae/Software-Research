1. Don't Prioritize resume 

- choose technologies because they are the right technologies, not for other reasons

2. Essential vs Accidental Complexity

- When complexity is necessary, be as simple as possible. Avoid unnecessary complexity
- Accidental complexity grows from the things we feel we must build to mitigate essential complexity
- Over-engineered frameworks add more complexity than they relieve

3. Your biggest problem likely isn't technical
- It pays to think about what it takes to make your developers successful
- What you need is a conversation
- Learning to treat people with respect, and give them the benefit of the doubt makes an architect more effective
- Conversations, not confrontations
- When you've got the right attitude
- Set mutually agreed upon goals

4. Communication is King; Clarity and Leadership it's servants
- Be clear and concise in the way you communicate your ideas
- Keep things simple as possible at the start of a project
- As a leader you must gain respect of your co-workers
- Let people know why decisions were made the way they were
- Work with developers, not against them

5. Architecting is about balancing
- Technical issues must be balanced with needs of business stakeholders
- Define ultimate set of priorities
- Don't only create functional, quality software, but also balance other priorities

6. Seek the value in requested capabilities
- Customers often state what they think is a viable solution
- Ignore their solution and try to understand what they're trying to accomplish

7. Stand up!
- Standing up automatically communicates authority and self-confidence

8. Skyscrapers aren't scalable
- Traditional big bang deployments are like stacking up a pile of beams and girders and expecting them to stick together in the shape of a building
- We should plan to deploy one component at a time
- When we deploy software, we are exposing ourselves to accumulated technical risk embodied in the code
- Lets us harden each component
- Forces us to create well-defined interfaces between components

9. You're negotiating more often than you think
- We're looking for a collaborative solution finding exercise; they're looking for a win-lose tactical maneuver. You don't want to make a concession on the first demand

10. Quantify
- Be precise about your requirements, not vague terms like 'fast' or 'responsive'

11. Working code is worth 500 lines of specs
- Specifications alone have no value, the ultimate goal is a production system
- Value the team who work on implementing your vision. Listen to them

12. No one size fits all solution
- Architects must develop 'contextual sense', because there is no one-size-fits-all solution to problems which may be widely diverse
- What is reasonable within a given context
- A big problem in the industry is that people are often responsible for solving problems requiring more contextual sense than they've accumulated

13. It's never too early to think about performance
- If you aren't looking at performance until late in the project cycle you have lost an incredible amount of information as to when performance changed
- If performance is going to be an important criterion should begin as soon as possible

14. Application architecture determines application performance
- In the end all vendor products and application architectures are constrainted by the same fundamental principles of distributed computing and underlying physics
- Applications run as porcesses on computers of limited capacity, communicating with each other via protocol stacks and links of non-zero latency

15. Commit and Run is a Crime
- Make testing and process easy to ensure people are testing before they commit

16. There can be More than One
- In technical domains we can force uniqueness. In business domains the inconsistent messy world intrudes
- Why not face up to the reality of a messy world and allow multiple, inconsistent, overlapping representations, services, solutions
- Consider the possibility that decomposition of your system by non-functional parameters may reveal opportunities to allow diverse solutions to your advantage

17. Business Drives
- Business organization's objectives and operating realities should be the light in which an Architect leads technology-oriented decision making
- Businesses want a ROI

18. Simplicity before generality, use before reuse
- Some code is designed to be general purpose without reference to concrete applications, leading to a dizzying array of options and possibilities that are often unused, misused, or just not useful
- Simplicity through experience rather than generality through guesswork
- Favouring simplicity before generality acts as a tiebreaker between ohterwise equally viable design alternatives
- When there are two possible solutions, favor the one that is simpler and based on a concrete need
- Software components should, first and foremost, be designed for use and to fulfill that use well

19. Architects must be hands on
- A good architect should lead by example, should be able to fulfill any of the positions within his team 

20. Continuously Integrate
- Architect should encourage continuous integration rather than build as a 'big bang' event

21. Avoid Scheduling Failures
- One common source of project failure is altering the project schedule in midstream without proper planning
- Problems occur when you are asked to do more in the same time

22. Architectural Tradeoffs
- Every software architect should know that you can't have it all

23. Database as a Fortress
- Your data lasts forever
- Enough cannot be said about the importance of building a solid data model from Day One
- While business rules and user interfaces do evolve rapidly, the structures and relationships within the data you collect often do not
- Therefore, it is critical to have your data model defined right from the start, both structurally and analytically

24. Use Uncertainty as a Driver
- Confronted with two options, most people think that the most important thing to do is to make a choice between them
- The presence of two options is an indicator that you need to consider uncertainty in the design
- Use the uncertianty as a driver to determine where you can defer commitment to details and where you can partition and abstract to reduce the significance of design decisions

25. Scope is the enemy of success
- Expanding scope is the enemy of success because the probability of failure grows faster than expected. Doubling a project's scope often increases its probability of failure by an order of magnitude