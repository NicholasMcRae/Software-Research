1. Don't Prioritize resume 

- choose technologies because they are the right technologies, not for other reasons

2. Essential vs Accidental Complexity

- When complexity is necessary, be as simple as possible. Avoid unnecessary complexity
- Accidental complexity grows from the things we feel we must build to mitigate essential complexity
- Over-engineered frameworks add more complexity than they relieve

3. Your biggest problem likely isn't technical
- It pays to think about what it takes to make your developers successful
- What you need is a conversation
- Learning to treat people with respect, and give them the benefit of the doubt makes an architect more effective
- Conversations, not confrontations
- When you've got the right attitude
- Set mutually agreed upon goals

4. Communication is King; Clarity and Leadership it's servants
- Be clear and concise in the way you communicate your ideas
- Keep things simple as possible at the start of a project
- As a leader you must gain respect of your co-workers
- Let people know why decisions were made the way they were
- Work with developers, not against them

5. Architecting is about balancing
- Technical issues must be balanced with needs of business stakeholders
- Define ultimate set of priorities
- Don't only create functional, quality software, but also balance other priorities

6. Seek the value in requested capabilities
- Customers often state what they think is a viable solution
- Ignore their solution and try to understand what they're trying to accomplish

7. Stand up!
- Standing up automatically communicates authority and self-confidence

8. Skyscrapers aren't scalable
- Traditional big bang deployments are like stacking up a pile of beams and girders and expecting them to stick together in the shape of a building
- We should plan to deploy one component at a time
- When we deploy software, we are exposing ourselves to accumulated technical risk embodied in the code
- Lets us harden each component
- Forces us to create well-defined interfaces between components

9. You're negotiating more often than you think
- We're looking for a collaborative solution finding exercise; they're looking for a win-lose tactical maneuver. You don't want to make a concession on the first demand

10. Quantify
- Be precise about your requirements, not vague terms like 'fast' or 'responsive'

11. Working code is worth 500 lines of specs
- Specifications alone have no value, the ultimate goal is a production system
- Value the team who work on implementing your vision. Listen to them

12. No one size fits all solution
- Architects must develop 'contextual sense', because there is no one-size-fits-all solution to problems which may be widely diverse
- What is reasonable within a given context
- A big problem in the industry is that people are often responsible for solving problems requiring more contextual sense than they've accumulated

13. It's never too early to think about performance
- If you aren't looking at performance until late in the project cycle you have lost an incredible amount of information as to when performance changed
- If performance is going to be an important criterion should begin as soon as possible

14. Application architecture determines application performance
- In the end all vendor products and application architectures are constrainted by the same fundamental principles of distributed computing and underlying physics
- Applications run as porcesses on computers of limited capacity, communicating with each other via protocol stacks and links of non-zero latency

15. Commit and Run is a Crime
- Make testing and process easy to ensure people are testing before they commit

16. There can be More than One
- In technical domains we can force uniqueness. In business domains the inconsistent messy world intrudes
- Why not face up to the reality of a messy world and allow multiple, inconsistent, overlapping representations, services, solutions
- Consider the possibility that decomposition of your system by non-functional parameters may reveal opportunities to allow diverse solutions to your advantage

17. Business Drives
- Business organization's objectives and operating realities should be the light in which an Architect leads technology-oriented decision making
- Businesses want a ROI

18. Simplicity before generality, use before reuse
- Some code is designed to be general purpose without reference to concrete applications, leading to a dizzying array of options and possibilities that are often unused, misused, or just not useful
- Simplicity through experience rather than generality through guesswork
- Favouring simplicity before generality acts as a tiebreaker between ohterwise equally viable design alternatives
- When there are two possible solutions, favor the one that is simpler and based on a concrete need
- Software components should, first and foremost, be designed for use and to fulfill that use well

19. Architects must be hands on
- A good architect should lead by example, should be able to fulfill any of the positions within his team 

20. Continuously Integrate
- Architect should encourage continuous integration rather than build as a 'big bang' event

21. Avoid Scheduling Failures
- One common source of project failure is altering the project schedule in midstream without proper planning
- Problems occur when you are asked to do more in the same time

22. Architectural Tradeoffs
- Every software architect should know that you can't have it all

23. Database as a Fortress
- Your data lasts forever
- Enough cannot be said about the importance of building a solid data model from Day One
- While business rules and user interfaces do evolve rapidly, the structures and relationships within the data you collect often do not
- Therefore, it is critical to have your data model defined right from the start, both structurally and analytically

24. Use Uncertainty as a Driver
- Confronted with two options, most people think that the most important thing to do is to make a choice between them
- The presence of two options is an indicator that you need to consider uncertainty in the design
- Use the uncertianty as a driver to determine where you can defer commitment to details and where you can partition and abstract to reduce the significance of design decisions

25. Scope is the enemy of success
- Expanding scope is the enemy of success because the probability of failure grows faster than expected. Doubling a project's scope often increases its probability of failure by an order of magnitude

26. Reuse is about people and education, not just architecture
- the truth is that even the most beautiful, elegant and re-usable architecture, framework, or system will only be re-used by people who know it is there, know how to use it, are convinced that it is better than doing it themselves

27. There is no 'I' in architecture
- Get your own ego out of the way

28. Get the 1000ft view
- The 1000 ft view isn't directly in the source code (ground level) or the very high level view (diagrams)
- It would provide information at the right level. It aggregates large amounts of data and multiple metrics - method count, class fan out
- The actual view very much depends on a specific aspect of quality

29. Try before choosing
- we should delay commitment until the last responsible moment, that is the moment at which, if the team does not make a decision, it is made for them
- when inaction results in an outcome that is not easily reversible
- this is produent because the later a decision is made the more information is available on which to base the decision
- the architect should constantly be on the look out for decisions that will have to be made soon
- the architect doesn't have to make the decision just orchestrate the decision making process
- Try a few approaches to the same problem - requires more effort but better odds of a good outcome

30. Understand the business domain
- Without business domain knowledge, it is difficult to undrestand the business problem, goals, and requirements, and therefore difficult to design an effective architecture to meet the requirements of the business

31. Programming is an act of design
- Development is a process of discovery and learning and not one of engineering and construction are fundamental to bring software practices forward
- By accepting that carving out source code is an act of design, not an act of construction we are in a position to adopt useful management practices that are proven to work

32. Time changes everything
- Over time a good solution to the right challenge will outlast all others
- Keep it simple
- Was the solution an appropriate one for the problem? Did it solve the needs of the problem? Keep these as your measure, you will be a lot happier

33. Give developers autonomy
- Make sure the design is being implemented as intended, but don't stand over people's shoulders to accomplish that goal

34. Value stewardship over showmanship
- Showmanship is important in marketing, but is counter productive to leading a software development project
- Architects must win the respect of their team by providing solid leadership and by truly understanding the technical and business domain
- Stewardship, taking responsibility and care of another's property is the appropriate role of an architect, act in the interests of their customer 

35. Warning, problems in mirror may be larger than they appear
- issues that caused more problems than the team expected
- often, a small part of the team identified the issue early on and the majority dismissed because they didn't understand how important it was until it was too late
- Establish an organized approach to managing risks, track risks the same way you track bugs
- Bad smells are worth recognizing. If the facts aren't there yet, look for the simplest tests that would provide the facts
- Blind spots are hard to recognize. People you trust to tell you the truth when you need it are a precious resource

36. The title of software architect has only lower-case 'a's; deal with it
- don't worry about the status of architects

37. Software architecture has ethical consequences
- If programs are successful they affect the lives of many people, impact can be positive or negative
- Every time I make a decision about how a program behaves, I am really deciding what my users can and cannot do
- It's not ethical to worsen the lives of others, even a small bit, just to make things easy for yourself

38. Everything will ultimately fail
- Accept that, no matter what, your system will have a variety of failure modes
- If you do not design your failure modes, then you will get whatever unpredictable, and usually dangerous, ones happen to emerge

39. Context is King
- effectively, there are no ideals, context is king, and simplicity it's humble servant
- context is the only force that trumps simplicity when making architectural decisions
- when I say context I refer not only to immediate forces like business drivers, but also emerging technologies and thought leadership on diverse topics
- good architects keep track of several fast-moving targets
- Good architecture is the product of decisions made within a context usually tainted with multiple competing priorities

40. It's all about performance
- People assume that the speed of the system will be acceptable
- System designers must consider many aspects of performance - programmers who implement, human interactions of the system, non-interactive components
- Measure task time, defined as the time required to complete a domain-specific task, including all human interactions with the system
- performance of non-interactive components is equally important to the success of the system

41. Engineer in the white spaces
- A system consists of interdependent programs
- We call the arrangement of these programs and their relationships 'architecture'
- the arrow bridging programs looks like a direct contact, but it isn't. The white space between the boxes is filled with hardware and software components
- It's essential to understand that static and dynamic loads that arrow must carry

42. Talk the Talk
- It is imperative that software architects, regardless of the platform they are working in, have an effective means of communication between one another
- one means is through architecture and design patterns
- Design patterns can be classified into four basic categories: enterprise architecture patterns, application architecture patterns, integration patterns, and design patterns
- generally based on the level of scope within the overall architecture
- knowing the basic design patterns as described by the Gang of Four Book is a must for any software architect
- they are a part of a standard vocabulary
- it is important to be aware of and understand the various anti-patterns as well - a term coined by Andrew Koenig - repeatable processes that produce ineffective results

43. Heterogeneity Wins
- As an industry we are faced with very serious problems and we need all the interoperability we can get
- Your job as architect has become ven more challenging because technology silos are crumbling in the face of new possibilities

44. Dwarves, Elves, Wizards and Kings
- An architect is a king of sorts, must be familiar with all of these characters and ensure that the architecture has roles for all of these characters
- The team will be severely limited in its reach if it can only approach problems in one way

45. Learn from Architects of Buildings
- Not getting a clear lesson out of this one

46. Fight repetition
- Are your developers performing recurring tasks that need little thinking? Can you find recurring patterns in the code?
- Duplication is evil
- Repetitive work slows down development
- Your responsibility is to remove it

47. Welcome to the Real World
- The real world is not binary
- Customers are inconsistent
- Distributed systems introduce a new set of inconsistencies
- Awareness is a first important step towards a solution
- Say good bye to the good old predictive architecture

48. Don't Control, but Observe
- We build loosely coupled systems because we want our systems to be flexible
- Building a system that is flexible and can evolve over time is a good idea
- Being a control freak is yesteryear, but letting software run wild is sure to spawn chaos
- You have to supplement lack of control with other mechanisms to avoid doing an instrument flight with other instruments
- Observation, model extraction, and validation, only way to architect for the 21st century

49. Janus the Architect
- an excellent IT architect will be a superior listener and evaluator
- being able to evaluate the technical skills of your staff with the design and technology to be used within the project will aid in creating a successful project
- a good architect is open to new ideas, tools, and designs that progress the project, team, or profession
- a keeper of doors and passageways

50. ARchitects focus is on the boundaries and interfaces
- the hard part is to find the natural places to locate boundaries and define the appropriate interfaces needed to build a working system
- difficult in large enterprise systems
- old wisdom such as: minimize coupling, maximize cohesion, and do not slice through regions where high rates of info exchange are required provide some guidance
- bounded contexts that address organizational, functional, or technical dependencies
- The result is a context map - a powerful tool

51. Challenge assumptions - especially your own
- assumption is th emother of all screw ups
- You should document rationale behind each decision that is made
- valuable because it helps highlight assumptions that the architects may have that are affecting important decisions
- It is important to make these assumptions visible and explicit for the sake of posterity
- and don't overlook the word relevant, something that was formerly true may not be today
- facts and assumptions are the pillars on which your software will be built, make sure they're solid

52. Record your rationale
- one type of documentation that ages well is to record the rationale behind decisions tha tare made
- documentation may come in handy in a number of situations
- also allows you to challenge assumptions or re-evaluate a decision, when conditions have changed
