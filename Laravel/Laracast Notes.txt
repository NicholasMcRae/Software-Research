Laracasts - https://laracasts.com/series/laravel-6-from-scratch

**********
Pre-reqs *
**********

At a glance
***********
- what happens when a request comes in 
- when a person visits the url - before page is rendered, we hit server
- application notices request for home page
- in Laravel we associate URI with a response
- we load controller - receives request - provides response
- controller can generate response in many ways
- Once controller has delegated to the model, it loads the view
- the view receives the data from the controller, and renders it to the user

**********
Routing **
**********

Basic Routing and Views
***********************
- laravel welcome screen
- under routes folder
- when user makes get request - in reponse we're loading a view
- view is html part of code base
- views are stored in resource directory
- duplicating routes - registering a new one
	- if user hits welcome, we'll do the same thing
- can return a simple string
- can even return JSON
- JSON will become useful when you start building APIs
- blade is a templating engine for laravel
- get - loading in a browser

Pass Request Data to Views
**************************
- sometimes you'll pass data through the query string
- can get this data using request helper function, providing key
- can return string
- can go into test view and echo name - view needs to receive data
- do this in routes file in view 
- however, we're echoing whatever user does, which is dangerous
- so let's escape the input
- you might use htmlspecialchars
	- however in laravel you can surround variable in curly braces
	- whenever referencing variables will use blade
- php doesn't understand this, it has to be compiled, laravel does this
- boils down to htmlspecialchars
- laravel provides a convenient way of doing this
- curly brace with exclamation doesn't escape - for example if you're fetching html

Route Wildcards
***************
- often you'll need routes that accepts a wildcard
- sometimes part of route needs to be unique - post in curly braces
- return a view called posts
- how do we grab that value? might need to fetch it to perform database query
- haven't yet reviewed databases
- can echo post itself
- passed in array, and querying for elements of array
- can show 404 page if array element doesn't exist
- summary
	- updated route for wildcard
	- make it available on clojure
	- simulated database
	
Routing to Controllers
**********************
- for small projects clojure are useful
- for sizeable projects you'll reach for a controller
- re-wire route for controller
	- listen for a post
	- load controller
	- need a method on the controller (show)
- Create controller 
	- can do it under app, http, controller
	- create method under controller
- Another way to do this
	- geerate - run php artisan from terminal
	- make:controller
	
*****************
Database Access *
*****************

Setup a Database Connection
***************************
- in former example using simple array
- although you would surely be using database
- .env file in sidebar, storing important configuration settings
- DB keys
	- all referenced in coresponding configuration file
	- under config folder
	- going read key from .env file, if it doesn't exist default to mysql
	- can use sqlite instead
	- have to create database
- signing in through terminal mysql -u root
	- create database called laravel6
- can create database manually or through GUI
- he will be using table plus
- manually creating a table and querying against it
- no longer hard coding post, fetching from database
- using DB class, selecting from table
- often you will want to inspect a variable
- dump and die
- grabbing post object, but we really want the body property
- now posts are stored in the database

Hello Eloquent
**************
- Now pulling post from database
- Now issue where if slug doesn't exist, we aren't doing a check
- can check for post in view, and if we don't have it abort
- query builder - safe and secure sql queries
- can also use eloquent
- can make a model
- eloquent model is useful in two ways - same api, but also a place to store business logic
- most of the time you will be using eloquent
- there will be a chapter on eloquent

Migrations 101
**************
- in recent episode we manually created table
- instead well use command line, using migration keyword
- find these in database directory
- laravel we'll provide ones we'll almost always want
- migration gives us a programmatic way to provide the structure of a table
- can make column optional
- can use migration to add columns to a table
- once you've updated a migration you can rollback, don't do this in production

Generate Multiple Files in a Single Command
*******************************************
- e.g., help when we make a model
- using all, will also create a factory and controller
- using make options

Business Logic
**************
- What other logic would we put in a class?
- Created migration, model, controller
- php artisan tinker (php playground)
- set column default on column in assignment table
- make code reflect the way you would speak about the business
- put method in model (assignment)
- in that method we update completed field (with complete method)
- this->completed = true, this->save
- exposing a clean api that anyone can use

*******
Views *
*******

Layout Pages
************
- welcome page is in resources / views directory
- leveraging layout files
- only want stuff that is unique to welcome page, in welcome page
- layout file has the general structure - content in welcome file
- welcome file extends layout file
- in layout file we write 'yield' anything you want, called it content
- in view we can declare that section - with section
- for main content section this is what we want to insert
- templates views - so we don't repeat structure of html

Integrate a Site Template
*************************
- download something called simple work
- using simple work as a base for a site template (a free site template)

Set an Active Menu Link
***********************
- Doing various things with the main template site menu

Asset Compilation with Laravel Mix and Webpack
**********************************************
- footer should be in the layout file
- lets talk about scripts and stylesheets
- CSS was in public directory
- but there is also the resources directory
- depends on if you have a build process
- if you're using a preprocessor like SASS, you need something the compiles those files down to raw CSS
- could be using gulp or webpack
- files in resources are compiled down to public directory
- laravel mix is a wrapper around webpack to make common steps easy
- mix.js
- installs with npm are installed in your node modules directory
- research laravel mix for the full documentation

Render Dynamic Data
*******************
- create an 'article' table
- inserts record with command line
- in routes file fetching article
- can do 'take(#) vs all'
- latest - helper method that updates sql query for order by
- put a for each into the html
- can use blade to output the information

Render Dynamic Data - Part 2
****************************
- linking each of the dynamic articles to it's own page
- register a route to articles
- articles/{some kind of article}
- make a controller called articles
- in controller you create method called show, which shows the article
- create file in views called article
- make the view into a template for the article

*******
Forms *
*******

The Seven Restful Controller Actions
************************************
- index shows a list 
- show, shows a specific one
- create a new article
- persist
- edit
- persist edit
- destroy resource
- 7 restful controller actions
- he would recommend that you follow this convention

Restful Routing
***************
- follow basic rest conventions across frameworks

Form Handling
*************
- 

