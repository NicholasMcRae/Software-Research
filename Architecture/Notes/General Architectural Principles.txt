General principles
******************

The phrase "iterative software development" suffers from the same drawback as "evidence-based medicine" in that it suggests there may be rational alternatives

******************

To quote the late Stefan Tilkov:

"Architecture is a property of a system, not a description of its intended design."

If your development process is focused on discussing and passing around descriptions of the thing you want to build, but you're not actually building, 
testing and learning from it, then rather than being focused on architecture, your process is studiously (and bureaucratically) avoiding it.

*******************

The factors in software reliability and maintainability are the same
	- Reducing the interdependence between different commponents or modules of a software system
	- Makes codes more testable, and easier to update

*******************

The better the software designer, the less they have to design up-front. The better the software designer, the more moves they have to get out of untenable situations. Ironically, it's exactly the better software designer who would make better design decisions on speculation, they just choose not to.

Next time you hear, "But we have to make this decision *now*!" ask yourself, "What skills would we need in order to *not* have to make this decision until later? How can we learn those skills?"

*******************

Software design and organisational design suffer from a similar problem, which is that when the decision-making power is being assigned in the wrong places, you end up with an unworkable mess.

*******************

In software design, if we want to avoid creating a big ball of mud, we aim to put the work where the data needed to do it is.

In organisational design, aim to put the decision-making power where the knowledge required to make that decision is.

When I see a situation where people are having to explain to the person making the decision what they need to know, I see the equivalent of "Feature Envy". Call it "Knowledge Envy".

*******************

Sometimes the fear of change hurts more than the certainty of a painful status quo. Expecting someone to change at that moment is silly. Either the fear has to go down or the status quo has to get worse first.

*******************

I did an exercise yesterday where I jotted down things that I think have made a positive difference to the way I write software on index cards, and then went through a "is greater than" process to sort them into order of impact.

Top 5:

1. Iterative & incremental development

2. Usage-driven design

3. Continuous testing

4. Continuous integration

5. Separation of concerns

That is to say, these are the 5 foundational properties of any methodology I'd consider to be workable.

And what's really interesting is that TDD ticks the first 3 boxes just by itself. It highly iterative & incremental, it drives design from usage cases, and testing's  going on throughout.

If your tests are agreed with your customer, then just add CI, and a generous spoonful of "things that change together belong together", and you've got yourself a development methodology.

*******************

"You could read *all* of the books about software architecture, and I'd wager more than 90% of it boils down to coupling and cohesion at various scales"

*******************

Law of Demeter - https://en.wikipedia.org/wiki/Law_of_Demeter
