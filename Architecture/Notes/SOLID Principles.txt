https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/

- Set of rules and best practices to follow while designing a class structure
- Help us understand the need for certain design patterns and software architecture in general
- First introduced by Robert Martin in a paper in 2000
- Author of Clean Code and Clean Architecture
- They all serve the same purpose
	- To create understandable, readable, and testable code that many developers can collaboratively work on 
	
- The Single Responsibility Principle
	- a class should do one thing, and should only have one reason to change
	- only one potential change (db logic, logging logic etc) in specification should be able to affect the class
	- many different teams can work on the same project, this could lead to incompatible modules
	- makes version control easier - by following SRP we know a commit is related to the module
	- fewer merge conflicts
	- A few examples
		- Should not have printing logic mixed with business logic
		- Should not mix persistence logic with business logic
		- So we create new classes for our printing and persistence logic
		
- Open-Closed Principle
	- Classes should be open for extension and closed to modification
	- Modification means changing the code of an existing class, and extension means adding new functionality
	- We should be able to add new functionality without touching the existing code for the class
	- Whenever we modify the existing code, we are taking the risk of creating potential bugs
	- So we should avoid touching the tested and reliable production code if possible
	- How are we going to add new functionality without touching the class?
		- Usually done with interfaces and abstract classes
	- In example, if we obeyed open-closed principle, we would not need to change this class
		- We change the type InvoicePersistence to interface, and add a save method
		- Interface ensures that our two persistence methods implement a save method, from interface InvoicePersistence
		- Now our persistence logic is easily extendable
	- You may think that we could just create multiple classes without an interface and add a save method to all of them
	- But let's say that we extend our app and have multiple persistence classes, that manage all persistence classes
	- We can now pass any class that implements the InvoicePersistence interface to this class with the help of polymorphism
	- This is the flexibility that interfaces provide
	
- Liskov Substitution Principle
	- States that subclasses should be substitutable for their base classes
	- We should be able to pass an object of class B to any method that expects class A, and the method should work
	- The child class extends the behavior but never narrows it down
	- In the example we overrode the getters and setters in the child, which violated the principle

- Interface Segregation Principle
	- Segregation means keeping things separated, this principle is about separating the interfaces
	- Principle states that many client-specific interfaces are better than one general purpose interface
	- Clients should not be forced to implement a function they do not need
	- Example, parking lot interface is too specific, which forced the FreeParking class to implement payment-related methods that are irrelevant
	- Let's separate or segregate the interfaces
	- With new model we can even go further and split the PaidParkingLot to support different types of payment
	- Now our model is much more flexible, extendable, and the clients do not need to implement any irrelevant logic
	
- Dependency Inversion Principle
	- Our classes should depend upon interfaces or abstract classes instead of concrete classes and functions
	- If the Open Closed Principle states the goal of OO architecture, the dependency inversion principle states the primary mechanism
	- These two principles are indeed related and we have applied this pattern while discussing the open closed principle
	- We want our classes to be open to extension, so we have reorganized our dependencies to depend on interfaces instead of concrete classes
	- PersistenceManager class depends on InvoicePersistence instead of classes that implement that interface
	
***************************************

Why SOLID principles are still the foundation for modern software architecture

https://stackoverflow.blog/2021/11/01/why-solid-principles-are-still-the-foundation-for-modern-software-architecture/

- As a whole, the SOLID principles make arguments for how code should be split up, which parts should be internal or exposed, and how code should use other code
- I'll dive into each letter below and explain it's original meaning, as well as an expanded meaning that can apply outside of OO programming

What has changed?
	- In the early 2000s Java and C++ were king
	- Since then the changes in the software industry have been profound
		- Dynamically typed languages - Python, Ruby, and JS
		- Non-object oriented paradigms - functional programming
		- Open source software - common for your dependencies to be open source
			- The kind of logic and data hiding that used to be imperative when writing a library is no longer as important
		- Microservices and saas - much more common to deploy a small service that talks to other services, either your own or powered by a third party
	- Taken as a whole, many of the things that SOLID really cared about, such as classes and interfaces, data hiding and polymorphism 
		- Are no longer things that programmers deal with every day
		
What hasn't changed?
	- there are some things that haven't changed and likely won't
	- Code is written and modified by people	
		- There will always be a need for well-documented code, particularly well documented APIs, whether internal or external
	- Code is organized into modules
		- In some languages these are classes, in others they may be individual source files
		- In JS they may be exported objects
		- Regardless, there exists some way of separating and organizing code into distinct, bounded units
		- There will always be a need to decide how best to group code together
	- Code can be internal or external
		- some code is written to be used by yourself or your team. Other code is written to be used by other teams
		- Needs to be some way to decide what code is visible and what is hidden

Modern SOLID
	- In the following sections I will restate each of the principles into a more general statement that can apply to OO, FP, or multi-paradigm programming
	- SRP
		- Each module should do one thing and do it well
	- OCP
		- You should be able to use and add to a module without re-writing it
	- LSP
		- You should be able to substitute one thing for another, if those things are declared to behave the same way
	- ISP
		- Don't show your clients more than they need to see
	- DIP
		- Depend upon abstractions, not concretions
		
Conclusion
To restate "modern SOLID" one more time:

Don't surprise the people who read your code.
Don't surprise the people who use your code.
Don't overwhelm the people who read your code.
Use sane boundaries for your code.
Use the right level of couplingâ€”keep things together that belong together, and keep them apart if they belong apart.

- Research on dependencies

***********************************

https://www.reddit.com/r/programming/comments/5qto27/why_every_element_of_solid_is_wrong/

THANK YOU. I've been a professional developer for 25 years. In the last few years, I've started to see this new kind of "bad code" creep into my clients' code bases. It's WAY over-abstracted, convoluted, and a complete mess. Usually even the original developer (when they are still around) can't make sense of it.

This replaces the "old" way of writing bad code (monoliths & spaghetti code). I appreciate that SOLID is trying to address those issues. Abstraction and encapsulation are important. I just think this framework is WAY too academic and overwrought. It is often confusing about what exactly it means, leading to some really extreme interpretations, especially around interfaces and class scope.

Abstract code that repeats. Don't cross abstraction boundaries. Encapsulate into sensible logical units. Use interfaces for classes with common partial data contracts. But please don't go on a puritanical crusade and demand everything be abstracted to the nth degree and wrapped in endless single-use interfaces. That helps nobody and makes the code both unreadable and unscalable.